name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.12'
  AWS_REGION: eu-north-1

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest

    - name: Run tests with pytest
      run: |
        pytest

  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    needs: [test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0

    - name: Package Lambda function
      run: |
        mkdir -p dist
        cd src
        zip -r ../dist/lambda_function.zip . -x "*.pyc" "*__pycache__*"

    - name: Terraform Init
      run: |
        cd infrastructure
        terraform init

    - name: Terraform Plan
      run: |
        cd infrastructure
        terraform plan

    - name: Terraform Apply
      run: |
        cd infrastructure
        terraform apply -auto-approve

    - name: Get API Gateway URL
      id: get-url
      run: |
        cd infrastructure
        echo "api_url=$(terraform output -raw api_gateway_url)" >> $GITHUB_OUTPUT

    - name: Test deployed API
      run: |
        API_URL="${{ steps.get-url.outputs.api_url }}"
        echo "Testing API at: $API_URL"
        
        # Test entry endpoint
        RESPONSE=$(curl -s -X POST "$API_URL/entry?plate=TEST123&parkingLot=1")
        echo "Entry response: $RESPONSE"
        
        # Extract ticket ID (basic parsing)
        TICKET_ID=$(echo $RESPONSE | grep -o '"ticketId":"[^"]*"' | cut -d'"' -f4)
        echo "Ticket ID: $TICKET_ID"
        
        # Wait a moment for the entry to be processed
        sleep 2
        
        # Test exit endpoint
        if [ ! -z "$TICKET_ID" ]; then
          EXIT_RESPONSE=$(curl -s -X POST "$API_URL/exit?ticketId=$TICKET_ID")
          echo "Exit response: $EXIT_RESPONSE"
        fi

    - name: Notify deployment success
      run: |
        echo "Deployment successful!"
        echo "API Gateway URL: ${{ steps.get-url.outputs.api_url }}" 